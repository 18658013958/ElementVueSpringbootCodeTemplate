(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{58:function(e,a,r){"use strict";r.r(a);var n=r(0),t=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"使用redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用redis","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用redis")]),r("h2",{attrs:{id:"为什么使用redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用redis","aria-hidden":"true"}},[e._v("#")]),e._v(" 为什么使用redis")]),r("p",[e._v("性能有保证，redis支持集群等，数据也有保证。而且后面使用 "),r("code",[e._v("spring-session")]),e._v(" 做分布式Session的时候，也是使用redis做持久化。所以一次到位直接使用redis。")]),r("h2",{attrs:{id:"增加redis依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#增加redis依赖","aria-hidden":"true"}},[e._v("#")]),e._v(" 增加redis依赖")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n")])]),r("h2",{attrs:{id:"增加redis配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#增加redis配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 增加redis配置")]),r("p",[r("code",[e._v("application.yml")]),e._v(" 上增加：")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n  redis:\n    host: localhost\n    port: 6379\n")])]),r("h2",{attrs:{id:"配置redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置redis","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置redis")]),r("p",[e._v("继承CachingConfigurerSupport，增加 "),r("code",[e._v("@EnableCaching")]),e._v(" 注解，需要重写 "),r("code",[e._v("keyGenerator")]),e._v(" 方法。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport\n")])]),r("p",[e._v("在类里面配置 "),r("code",[e._v("RestTemplate")]),e._v(" ，需要配置key和value的序列化类。")]),r("p",[e._v("key序列化使用"),r("code",[e._v("StringRedisSerializer")]),e._v(", 不配置的话key前面会出现乱码。")]),r("p",[e._v("value序列化使用 "),r("code",[e._v("GenericJackson2JsonRedisSerializer")]),e._v(" ，保存为Json格式。该类目前反序列化还有一些bug，只能反序列化实现了Serialize的类。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Bean\npublic RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n  RedisTemplate template = new RedisTemplate();\n\n  template.setConnectionFactory(factory);\n\n  RedisSerializer keySerializer = new StringRedisSerializer();\n\n  // 设置key序列化类，否则key前面会多了一些乱码\n  template.setKeySerializer(keySerializer);\n  template.setHashKeySerializer(keySerializer);\n\n  // FIXME 有些版本有bug，没有序列化的只能序列化，但无法反序列化\n  GenericJackson2JsonRedisSerializer jsonSerializer = new GenericJackson2JsonRedisSerializer();\n\n  // 设置内容序列化类\n  template.setValueSerializer(jsonSerializer);\n\n  template.afterPropertiesSet();\n\n  return template;\n}\n")])]),r("p",[e._v("配置 CacheManager，包括指定缓存和默认缓存的超时时间的配置。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Bean\npublic CacheManager cacheManager(RedisTemplate redisTemplate) {\n  RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n\n  Map<String, Long> expires = new HashMap<>();\n\n  expires.put(CacheNames.CONFIG, 60L);\n\n  // 设置超时\n  cacheManager.setExpires(expires);\n\n  // 没有设置的缓存默认过期时间\n  cacheManager.setDefaultExpiration(60 * 60);\n\n  return cacheManager;\n}\n")])]),r("p",[e._v("重写 "),r("code",[e._v("keyGenerator")]),e._v("，可以支持使用@Cacheable不指定Key。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Override\npublic KeyGenerator keyGenerator() {\n  return new KeyGenerator() {\n    @Override\n    public Object generate(Object target, Method method, Object... params) {\n      StringBuilder sb = new StringBuilder();\n      \n      sb.append(target.getClass().getSimpleName());\n      sb.append('.').append(method.getName());\n\n      // FIXME 参数太长的时候请指定key属性，否则key太长\n      for (Object obj : params) {\n        if (obj != null) {\n          sb.append(obj.toString());\n        }\n      }\n\n      return sb.toString();\n    }\n  };\n}\n")])]),r("h2",{attrs:{id:"使用缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用缓存")]),r("p",[e._v("保存的时候使用 "),r("code",[e._v("@Cacheable")]),e._v("，清空使用 "),r("code",[e._v("@CacheEvict")]),e._v(" ，更新的时候使用 "),r("code",[e._v("@CachePut")]),e._v(" 。")]),r("p",[e._v("反序列化有bug，没有实现 "),r("code",[e._v("Serializable")]),e._v(" 的只能序列化，无法反序列化。可能后续版本会解决该问题。")]),r("p",[e._v("所以把下面的查询代码修改一下，用 实现了 "),r("code",[e._v("Serializable")]),e._v(" 的 "),r("code",[e._v("ArrayList")]),e._v(" 包装返回。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@Cacheable("config")\n@Override\npublic Collection<Config> getAll() {\n  System.out.println("\\n----------GetAll----------\\n");\n  return new ArrayList<>(configs.values());\n}\n\n@CacheEvict(value = CacheNames.CONFIG, allEntries = true)\n@Override\npublic long add(Config config) {\n\n}\n\n/**\n * 删除配置项\n */\n@CacheEvict(value = CacheNames.CONFIG, allEntries = true)\n@Override\npublic boolean delete(long id) {\n  \n}\n')])]),r("h2",{attrs:{id:"定时清空缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定时清空缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 定时清空缓存")]),r("p",[e._v("也可以定时清空cache，使用 "),r("code",[e._v("@EnableScheduling")]),e._v(" 和 "),r("code",[e._v("@Scheduled")]),e._v(" 注解。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@Component\n@EnableScheduling\npublic class ClearCacheTask {\n\n  /**\n   * 定时清空缓存\n   */\n  @Scheduled(fixedRate = 60 * 1000L)\n  @CacheEvict(value = { CacheNames.CONFIG }, allEntries = true)\n  public void clearCaches() {\n    System.out.println("\\n------------ clear caches ------------\\n");\n  }\n}\n')])]),r("h2",{attrs:{id:"redis-怎么样保存cache"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-怎么样保存cache","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 怎么样保存cache")]),r("p",[e._v("增加2条数据，一个是类型为 "),r("code",[e._v("zset")]),e._v(" 的 "),r("code",[e._v("缓存名~keys")]),e._v(" , 里面存放了该缓存所有的key， 一个是对应的key，值为序列化后的json。")]),r("p",[r("code",[e._v("zset")]),e._v(" 是带权重的有序集合，可以使用 "),r("code",[e._v("zrange config~keys -1 1 withscores")]),e._v(" 查看元素，新加入的都是 0.0 。使用 "),r("code",[e._v("zcount config~keys -1 1")]),e._v(" 查看个数。")]),r("p",[e._v("可以使用 "),r("code",[e._v("ttl")]),e._v(" 命令查看超时时间，单位为秒。")]),r("p",[r("img",{attrs:{src:"/pictures/redisconsole.png",alt:"redis console"}})]),r("h2",{attrs:{id:"安装redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装redis","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装redis")]),r("p",[e._v("https://github.com/MicrosoftArchive/redis/releases 下载最新版本，3.2")]),r("p",[e._v("启动")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("redis-server.exe redis.windows.conf\n")])]),r("p",[e._v("也可以使用 "),r("a",{attrs:{href:"https://github.com/caoxinyu/RedisClient",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis Client")]),e._v(" 查看。")]),r("p",[r("img",{attrs:{src:"/pictures/redisclient.png",alt:"redis client"}})]),r("h2",{attrs:{id:"redis-比较重要命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-比较重要命令","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 比较重要命令")]),r("ul",[r("li",[e._v("keys * / keys cn* 查看数据")]),r("li",[e._v("type keyname 查看数据类型")]),r("li",[e._v("dbsize 查看记录数")]),r("li",[e._v("flushdb 删除【当前数据库】所有记录")]),r("li",[e._v("flushall 删除所有数据库里面的所有数据，注意不是当前数据库，而是所有数据库。")]),r("li",[e._v("expire，ttl 设置和查看超时时间")]),r("li",[e._v("select 选择0-15号数据库")])])])}],!1,null,null,null);a.default=t.exports}}]);